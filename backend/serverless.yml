custom:
  localEnv: ${file(./local.yml)}
# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${self:custom.localEnv.myOrg}
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: conezone
# "service" is the name of this project. This will also be added to your AWS resource names.
service: backend

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  deploymentMethod: direct
  iam:
    role: ${self:custom.localEnv.myLambda}

functions:
  PostItem:
    handler: functions/PostItem/index.handler
    events:
      - httpApi:
          path: /item
          method: post
  DeleteItem:
    handler: functions/DeleteItem/index.handler
    events:
      - httpApi:
          path: /item/{id}
          method: delete
  GetItems:
    handler: functions/GetItems/index.handler
    events:
      - httpApi:
          path: /item
          method: get
  PutItem:
    handler: functions/PutItem/index.handler
    events:
      - httpApi:
          path: /item/{id}
          method: put
  GetItem:
    handler: functions/GetItem/index.handler
    events:
      - httpApi:
          path: /item/{id}
          method: get
  PostRegister:
    handler: functions/PostRegister/index.handler
    events:
      - httpApi:
          path: /user/register
          method: post
  PostLoggaIn:
    handler: functions/PostLoggaIn/index.handler
    events:
      - httpApi:
          path: /user/loggain
          method: post
  PostOrder:
    handler: functions/PostOrder/index.handler
    events:
      - httpApi:
          path: /order
          method: post
  GetOrder: 
    handler: functions/GetOrder/index.handler
    events:
      - httpApi:
          path: /order/{pk}/{id}
          method: get
  GetOrders: 
    handler: functions/GetOrders/index.handler
    events:
      - httpApi:
          path: /order
          method: get
  PutOrder: 
    handler: functions/PutOrder/index.handler
    events:
      - httpApi:
          path: /order/{pk}/{id}
          method: put
  DeleteOrder: 
    handler: functions/DeleteOrder/index.handler
    events:
      - httpApi:
          path: /order/{pk}/{id}
          method: delete

resources:
  Resources:
    MenuTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'conezonemenu-db'
        AttributeDefinitions:
          - AttributeName: 'pk'
            AttributeType: 'S'
          - AttributeName: 'sk'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'pk'
            KeyType: 'HASH'
          - AttributeName: 'sk'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST
        
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'conezoneuser-db'
        AttributeDefinitions:
          - AttributeName: 'UserID'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'UserID'
            KeyType: 'HASH'
        BillingMode: PAY_PER_REQUEST
    
    OrderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'conezoneorder-db'
        AttributeDefinitions:
          - AttributeName: 'pk'
            AttributeType: 'S'
          - AttributeName: 'sk'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'pk'
            KeyType: 'HASH'
          - AttributeName: 'sk'
            KeyType: 'RANGE'
        BillingMode: PAY_PER_REQUEST